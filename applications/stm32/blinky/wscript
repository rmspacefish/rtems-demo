#
# LED blink Waf script
#
from __future__ import print_function

import sys
sys.path.append('../..')

rtems_version = "6"

try:
	# from ...rtems_waf import rtems as rtems
	import rtems_waf.rtems as rtems
except ImportError:
	print('error: no rtems_waf git submodule')
	import sys
	sys.exit(1)

def init(ctx):
	rtems.init(ctx, version = rtems_version, long_commands = True)

def bsp_configure(conf, arch_bsp):
	# Add BSP specific configuration checks
	pass

def options(opt):
	rtems.options(opt)
	opt.load('objcopy')

def configure(conf):
	rtems.configure(conf, bsp_configure = bsp_configure)
	# RTEMS already loads objcopy
	# conf.load('objcopy')


def build(bld):
	rtems.build(bld)
	root_src = ['init.c', 'led.c']
	board_src = ['stm32h7xx_nucleo.c']
	target_name = "blinky"
	target_bin_extension = ".bin"
	target_elf_extension = ".elf"
	target_elf_name = target_name + target_elf_extension
	target_bin_name = target_name + target_bin_extension
	# This works as well
	#bld(features = 'c cprogram objcopy', target = target_elf_name, cflags = '-g -O2',
	#		source = root_src + board_src,  objcopy_target=target_bin_name,
	#		objcopy_bfdname='binary')

	bld(features = 'c cprogram', target = target_elf_name, cflags = '-g -O2',
			source = root_src + board_src)
	bld(target=target_bin_name, source=target_elf_name,
		rule = "${OBJCOPY} -O binary ${SRC} ${TGT}",
		cls_keyword=lambda x: "Creating binary " + target_bin_name + " from")

